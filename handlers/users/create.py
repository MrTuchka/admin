from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.builtin import Command
from aiogram.types import CallbackQuery

from bot_deployment.deployer import BotDeployer
from data.config import bot_deployer_connection_config
from states.create_bot import createBot
from keyboards.inline.createuserbuttons import createuser, BOT_TEMPLATES, cancel_button
from loader import dp
from utils.db_api.dbconfig import get_bot_id, get_field, create_users_for_db


@dp.message_handler(Command("create_bot"))
async def bot_start(message: types.Message, state: FSMContext):
    try:

        for chat_message in range(3):
            await dp.bot.delete_message(message.chat.id, message.message_id - chat_message)
    except:
        pass
    bot = await get_bot_id(message.from_user.id)
    if bot == "No data":
        await message.answer("–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ–∫–µ–Ω, —è–∫–∏–π –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤ @BotFather\n<a href='https://telegra.ph/YAk-otrimati-TOKEN-v-BotFather-09-02'>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è</a> –ø–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—é –¢–û–ö–ï–ù–ê.", reply_markup=cancel_button, disable_web_page_preview=True)
        await createBot.create.set()
    elif bot != '':
        await message.answer("ü§∑‚Äç‚ôÇÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞.\n–í–∏–¥–∞–ª—ñ—Ç—å —Å–≤–æ–≥–æ –±–æ—Ç–∞, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ /delete")
    else:
        await message.answer("–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç–æ–∫–µ–Ω, —è–∫–∏–π –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤ @BotFather.\n<a href='https://telegra.ph/YAk-otrimati-TOKEN-v-BotFather-09-02'>–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è</a> –ø–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—é –¢–û–ö–ï–ù–ê.", reply_markup=cancel_button, disable_web_page_preview=True)
        await createBot.create.set()
        await state.update_data(chat_id=message.chat.id, message_id=message.message_id)


@dp.message_handler(content_types=types.ContentType.ANY, state=createBot.create)
async def take_bot_token(message: types.Message, state: FSMContext):
    token = message.text
    user_id = message.from_user.id
    await state.update_data(Token=token, user_id=user_id)
    data = await state.get_data()
    chat_id = data.get("chat_id")
    message_id = data.get("message_id")
    await message.delete()
    try:
        if message.text[10] == ":" and len(message.text) == 46:
            await dp.bot.edit_message_text(chat_id=chat_id, message_id=(message_id + 1), text=f"–°—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –∑ —Ç–æ–∫–µ–Ω–æ–º:\n--------\n<b>{message.text}</b>"
                                                                                        f"\n--------\n<i>–Ø–∫—â–æ –≤–∏ –Ω–µ –≤—ñ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Ç–æ–∫–µ–Ω, –ø—Ä–æ—Å—Ç–æ "
                                                                                        f"–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–æ–≤–∏–π</i>", reply_markup=createuser, parse_mode="html")
            await createBot.create.set()
    except:
        try:
            await dp.bot.delete_message(message.chat.id, message.message_id - 1)
            await message.delete()
        except:
            pass

        await message.answer(
            "‚ùó–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤—ñ—Ä–Ω–∏–π –¢–û–ö–ï–ù‚ùó\n–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ @BotFather —Ç–∞ –∑–∫–æ–ø—ñ—é–π—Ç–µ –¢–û–ö–ï–ù, —è–∫—â–æ –≤–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–ª–∏ –±–æ—Ç–∞.\n\n–ê–±–æ —Å–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –±–æ—Ç–∞ –≤ @BotFather, –∞ –≤–∂–µ –ø–æ—Ç—ñ–º —Å–∫–æ–ø—ñ—é–π—Ç–µ —Ç–æ–∫–µ–Ω.\n\n–ü—ñ—Å–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¢–û–ö–ï–ù–ê –ø–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —ñ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /create_bot")
        await state.finish()

@dp.callback_query_handler(Text('cancel'), state=createBot.create)
async def cancel(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await call.message.delete()
    await call.message.answer("–Ø–∫—â–æ, –ø–µ—Ä–µ–¥—É–º–∞—î—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /create_bot")
    await state.finish()



@dp.callback_query_handler(Text(startswith="create_bot__"), state=createBot.create)
async def create_user(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    token = data.get("Token")

    data = await state.get_data()
    user_id = data.get("user_id")
    username = await get_field('users', user_id, 'user', 'name')

    bot_id = call.data.split("__")[1]
    bot_template = next((t for t in BOT_TEMPLATES if t["bot_id"] == bot_id), None)
    if bot_template is None:
        await call.message.answer("‚ùó Oops! –ë–æ—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùó")
        await state.finish()
        return

    github_repo = bot_template["github_repo"]
    bot_token = str(token)

    await call.message.delete()
    await call.message.answer("‚öô –°—Ç–≤–æ—Ä—é—é –±–æ—Ç–∞, –±—É–¥—å-–ª–∞—Å–∫–∞ –∑–∞—á–µ–∫–∞–π—Ç–µ...")

    deployer = BotDeployer(bot_deployer_connection_config)
    deployment_id = deployer.deploy(github_repo, bot_token, user_id)

    await create_users_for_db(id=user_id, username=username, phone='', bot_id=deployment_id,
                              bot_name=bot_id, bot_token=bot_token)

    await call.message.answer(f"–í–∞—à –±–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ.\n"
                              f"–î–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /edit")
    await state.finish()
